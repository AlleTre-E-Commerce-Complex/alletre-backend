generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                  Int         @id @default(autoincrement())
  userName            String?
  email               String?     @unique
  password            String?
  phone               String?     @unique
  createdAt           DateTime    @default(now())
  imageLink           String?
  imagePath           String?
  isOAuth             Boolean     @default(false)
  hasCompletedProfile Boolean     @default(false)
  isVerified          Boolean     @default(false)
  auctions            Auction[]
  locations           Location[]
  products            Product[]
  watchLists          WatchList[]
}

model Location {
  id                    Int      @id @default(autoincrement())
  userId                Int
  country               String
  city                  String
  subAdministrativeArea String?
  streetName            String?
  createdAt             DateTime @default(now())
  user                  User     @relation(fields: [userId], references: [id])
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String
  createdAt     DateTime      @default(now())
  products      Product[]
  subCategories SubCategory[]
}

model SubCategory {
  id         Int       @id @default(autoincrement())
  name       String
  categoryId Int
  createdAt  DateTime  @default(now())
  products   Product[]
  category   Category  @relation(fields: [categoryId], references: [id])
}

model Product {
  id            Int         @id @default(autoincrement())
  userId        Int
  categoryId    Int
  subCategoryId Int
  quantity      Int         @default(1)
  title         String
  brand         String
  model         String
  usageStatus   UsageStatus
  price         Int
  description   Int
  color         String
  auctions      Auction[]
  images        Image[]
  category      Category    @relation(fields: [categoryId], references: [id])
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
}

model Image {
  id        Int      @id @default(autoincrement())
  productId Int
  imagePath String?
  imageLink String?
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
}

model Auction {
  id              Int           @id @default(autoincrement())
  userId          Int
  productId       Int
  status          AuctionStatus
  type            AuctionType
  durationInDays  Int?
  durationInHours Int?
  startBidAmount  Int
  isBuyNowAllowed Boolean       @default(false)
  acceptedAmount  Int?
  startDate       DateTime?
  endDate         DateTime?
  createdAt       DateTime
  product         Product       @relation(fields: [productId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
  watchLists      WatchList[]
}

model WatchList {
  id        Int      @id @default(autoincrement())
  userId    Int
  auctionId Int
  createdAt DateTime @default(now())
  auction   Auction  @relation(fields: [auctionId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum UsageStatus {
  NEW
  USED
  OPEN_BOX
}

enum AuctionStatus {
  DRAFTED
  PENDING_OWNER_DEPOIST
  ON_SCHEDULING
  PUBLISHED
  DELETED
  ARCHIVED
  SOLD
  EXPIRED
}

enum AuctionType {
  QUICK
  DAILY
  SCHEDULED_QUICK
  SCHEDULED_DAILY
}
