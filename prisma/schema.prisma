generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                  Int         @id @default(autoincrement())
  userName            String?
  email               String      @unique
  password            String
  phone               String      @unique
  createdAt           DateTime    @default(now())
  imageLink           String?
  imagePath           String?
  isOAuth             Boolean     @default(false)
  hasCompletedProfile Boolean     @default(false)
  isVerified          Boolean     @default(false)
  auctions            Auction[]
  locations           Location[]
  watchLists          WatchList[]
  products            Product[]
}

model Country {
  id        Int        @id @default(autoincrement())
  nameAr    String
  nameEn    String
  createdAt DateTime   @default(now())
  cities    City[]
  locations Location[]
  Product   Product[]
}

model City {
  id        Int        @id @default(autoincrement())
  nameAr    String
  nameEn    String
  createdAt DateTime   @default(now())
  countryId Int
  country   Country    @relation(fields: [countryId], references: [id])
  locations Location[]
  Product   Product[]
}

model Location {
  id        Int       @id @default(autoincrement())
  userId    Int
  countryId Int
  cityId    Int
  address   String
  zipCode   String?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  city      City      @relation(fields: [cityId], references: [id])
  country   Country   @relation(fields: [countryId], references: [id])
  auctions  Auction[]
}

model Category {
  id            Int            @id @default(autoincrement())
  nameEn        String
  nameAr        String
  createdAt     DateTime       @default(now())
  products      Product[]
  subCategories SubCategory[]
  brands        Brand[]
  CustomFields  CustomFields[]
}

model SubCategory {
  id           Int            @id @default(autoincrement())
  nameAr       String
  nameEn       String
  categoryId   Int
  createdAt    DateTime       @default(now())
  products     Product[]
  category     Category       @relation(fields: [categoryId], references: [id])
  customFields CustomFields[]
}

model CustomFields {
  id            Int         @id @default(autoincrement())
  subCategoryId Int
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  categoryId    Int?
  category      Category?   @relation(fields: [categoryId], references: [id])
  key           String
  type          String
  labelAr       String
  labelEn       String
  placeHolderAr String?
  placeHolderEn String?
}

model Brand {
  id         Int       @id @default(autoincrement())
  name       String
  categoryId Int
  createdAt  DateTime  @default(now())
  products   Product[]
  category   Category  @relation(fields: [categoryId], references: [id])
}

model Product {
  id                  Int          @id @default(autoincrement())
  categoryId          Int
  subCategoryId       Int
  brandId             Int
  userId              Int
  quantity            Int          @default(1)
  title               String
  model               String
  usageStatus         UsageStatus?
  price               Float
  description         String
  color               String?
  screenSize          Int?
  processor           String?
  operatingSystem     String?
  releaseYear         String?
  regionOfManufacture String?
  ramSize             Int?
  cameraType          String?
  material            String?
  age                 String?
  totalArea           Int?
  numberOfRooms       Int?
  numberOfFloors      Int?
  landType            String?
  countryId           Int?
  cityId              Int?
  auction             Auction?
  images              Image[]
  category            Category     @relation(fields: [categoryId], references: [id])
  subCategory         SubCategory  @relation(fields: [subCategoryId], references: [id])
  brand               Brand        @relation(fields: [brandId], references: [id])
  user                User         @relation(fields: [userId], references: [id])
  city                City?        @relation(fields: [cityId], references: [id])
  country             Country?     @relation(fields: [countryId], references: [id])
}

model Image {
  id        Int      @id @default(autoincrement())
  productId Int
  imagePath String
  imageLink String
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
}

model Auction {
  id              Int           @id @default(autoincrement())
  userId          Int
  productId       Int           @unique
  locationId      Int
  status          AuctionStatus
  type            AuctionType
  durationUnit    DurationUnits
  durationInDays  Int?
  durationInHours Int?
  startBidAmount  Int
  isBuyNowAllowed Boolean       @default(false)
  acceptedAmount  Int?
  startDate       DateTime
  expiryDate      DateTime?
  createdAt       DateTime
  product         Product       @relation(fields: [productId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
  watchLists      WatchList[]
  location        Location      @relation(fields: [locationId], references: [id])
}

model WatchList {
  id        Int      @id @default(autoincrement())
  userId    Int
  auctionId Int
  createdAt DateTime @default(now())
  auction   Auction  @relation(fields: [auctionId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum UsageStatus {
  NEW
  USED
  OPEN_BOX
}

enum AuctionStatus {
  DRAFTED
  PENDING_OWNER_DEPOIST
  ON_SCHEDULING
  PUBLISHED
  DELETED
  ARCHIVED
  SOLD
  EXPIRED
}

enum AuctionType {
  ON_TIME
  SCHEDULED
}

enum DurationUnits {
  DAYS
  HOURS
}
