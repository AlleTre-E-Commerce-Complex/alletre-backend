generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                       Int                  @id @default(autoincrement())
  userName                 String?
  email                    String?              @unique
  password                 String?
  phone                    String?              @unique
  createdAt                DateTime             @default(now())
  imageLink                String?
  imagePath                String?
  isOAuth                  Boolean              @default(false)
  hasCompletedProfile      Boolean              @default(false)
  isVerified               Boolean              @default(false)
  lang                     String               @default("en")
  isBlocked                Boolean              @default(false)
  oAuthType                OAuthType?
  ipAddress                String?
  socketId                 String?
  stripeId                 String?
  stripeConnectedAccountId String?
  auctions                 Auction[]
  ListedProducts           Product[]
  locations                Location[]
  watchLists               WatchList[]
  bids                     Bids[]
  Payment                  Payment[]
  JoinedAuction            JoinedAuction[]
  wallet                   Wallet[]
  alletreWallet            AlletreWallet[]
  auctionComplaints        AuctionComplaints[]
  bankAccount              BankAccount[]
  withdrawalRequests       WithdrawalRequests[]
  notifications            Notification[]
  pushSubscriptions        PushSubscription[]
}

model SubscribedUser {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  isActive  Boolean
  createdAt DateTime @default(now())
}

model Country {
  id        Int        @id @default(autoincrement())
  nameAr    String
  nameEn    String
  currency  String?
  createdAt DateTime   @default(now())
  cities    City[]
  locations Location[]
  Product   Product[]
}

model BankAccount {
  id                 Int                  @id @default(autoincrement())
  accountHolderName  String
  bankName           String
  accountNumber      String
  routingNumber      String
  userId             Int
  user               User                 @relation(fields: [userId], references: [id])
  withdrawalRequests WithdrawalRequests[]
}

model WithdrawalRequests {
  id               Int              @id @default(autoincrement())
  amount           Decimal
  referenceNumber  Int              @unique @default(autoincrement())
  bankAccountId    Int
  userId           Int
  withdrawalStatus WithdrawalStatus @default(PENDING)
  user             User             @relation(fields: [userId], references: [id])
  bankAccount      BankAccount      @relation(fields: [bankAccountId], references: [id])
}

model City {
  id        Int        @id @default(autoincrement())
  nameAr    String
  nameEn    String
  createdAt DateTime   @default(now())
  countryId Int
  country   Country    @relation(fields: [countryId], references: [id])
  locations Location[]
  Product   Product[]
}

model Location {
  id           Int       @id @default(autoincrement())
  userId       Int
  countryId    Int
  cityId       Int
  address      String
  zipCode      String?
  addressLabel String?
  createdAt    DateTime  @default(now())
  isMain       Boolean   @default(false)
  user         User      @relation(fields: [userId], references: [id])
  city         City      @relation(fields: [cityId], references: [id])
  country      Country   @relation(fields: [countryId], references: [id])
  auctions     Auction[]
}

model Category {
  id                       Int            @id @default(autoincrement())
  nameEn                   String
  nameAr                   String
  createdAt                DateTime       @default(now())
  hasUsageCondition        Boolean        @default(false)
  sellerDepositFixedAmount Decimal?
  bidderDepositFixedAmount Decimal?
  bannerLink               String?
  bannerPath               String?
  sliderLink               String?
  sliderPath               String?
  status                   Boolean        @default(false)
  products                 Product[]
  subCategories            SubCategory[]
  brands                   Brand[]
  customFields             CustomFields[]
}

model SubCategory {
  id           Int            @id @default(autoincrement())
  nameAr       String
  nameEn       String
  categoryId   Int
  createdAt    DateTime       @default(now())
  imageLink    String?
  imagePath    String?
  products     Product[]
  category     Category       @relation(fields: [categoryId], references: [id])
  customFields CustomFields[]
}

model CustomFields {
  id            Int          @id @default(autoincrement())
  subCategoryId Int?
  subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id])
  categoryId    Int?
  category      Category?    @relation(fields: [categoryId], references: [id])
  key           String
  resKey        String       @default("")
  type          String
  labelAr       String
  labelEn       String
}

model Brand {
  id         Int      @id @default(autoincrement())
  name       String
  categoryId Int
  createdAt  DateTime @default(now())
  // products   Product[]
  category   Category @relation(fields: [categoryId], references: [id])
}

model Product {
  id                  Int          @id @default(autoincrement())
  userId              Int?          
  isAuctionProduct    Boolean?     @default(true)
  categoryId          Int
  subCategoryId       Int?
  brandId             Int?
  quantity            Int          @default(1)
  title               String
  model               String?
  usageStatus         UsageStatus?
  description         String
  color               String?
  screenSize          Float?
  processor           String?
  operatingSystem     String?
  releaseYear         String?
  regionOfManufacture String?
  ramSize             Int?
  isOffer             Boolean      @default(false)
  offerAmount         Decimal?     @default(0)
  ProductListingPrice Decimal?     @default(0)
  cameraType          String?
  material            String?
  memory              String?
  age                 Int?
  totalArea           Float?
  numberOfRooms       Int?
  numberOfFloors      Int?
  landType            String?
  countryId           Int?
  cityId              Int?
  carType             String?
  auction             Auction?
  images              Image[]
  brand               String?
  user                User?         @relation(fields: [userId], references: [id])
  category            Category     @relation(fields: [categoryId], references: [id])
  subCategory         SubCategory? @relation(fields: [subCategoryId], references: [id])
  // brand               Brand?       @relation(fields: [brandId], references: [id])
  city                City?        @relation(fields: [cityId], references: [id])
  country             Country?     @relation(fields: [countryId], references: [id])
}

model Image {
  id        Int      @id @default(autoincrement())
  productId Int
  imagePath String
  imageLink String
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
}

model PushSubscription {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  fcmToken  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Auction {
  id                          Int                    @id @default(autoincrement())
  userId                      Int  
  productId                   Int                    @unique
  locationId                  Int?   
  status                      AuctionStatus          @default(PENDING_OWNER_DEPOIST)
  type                        AuctionType?   
  durationUnit                DurationUnits?   
  durationInDays              Int?   
  durationInHours             Int?   
  startBidAmount              Decimal?   
  isBuyNowAllowed             Boolean                @default(false)
  isItemSendForDelivery       Boolean?               @default(false)
  IsDelivery                  Boolean?               @default(false)
  deliveryPolicyDescription   String?  
  numOfDaysOfExpecetdDelivery Int?   
  deliveryType                DeliveryType?          @default(NOT_SPECIFIED)
  DeliveryFees                Decimal?   
  IsReturnPolicy              Boolean?               @default(false)
  returnPolicyDescription     String?  
  IsWarranty                  Boolean?               @default(false)
  warrantyPolicyDescription   String?
  acceptedAmount              Decimal?
  startDate                   DateTime?
  expiryDate                  DateTime?
  endDate                     DateTime?
  deliveryRequestsStatus      DeliveryRequestsStatus @default(DELIVERY_PENDING)
  createdAt                   DateTime               @default(now())
  product                     Product                @relation(fields: [productId], references: [id])
  user                        User                   @relation(fields: [userId], references: [id])
  watchLists                  WatchList[]   
  location                    Location?              @relation(fields: [locationId], references: [id])
  bids                        Bids[]
  Payment                     Payment[]
  JoinedAuction               JoinedAuction[]
  Wallet                      Wallet[]
  alletreWallet               AlletreWallet[]
  auctionComplaints           AuctionComplaints[]
}

model Purchase {
  id              Int             @id @default(autoincrement())
  productId       Int             @unique
  sellerId        Int
  buyerId         Int
  purchaseDate    DateTime        @default(now())
  productQuantity Int             @default(1)
  productAmount   Decimal
  totalAmount     Decimal
  Wallet          Wallet[]
  alletreWallet   AlletreWallet[]
}

model WatchList {
  id        Int      @id @default(autoincrement())
  userId    Int
  auctionId Int
  createdAt DateTime @default(now())
  auction   Auction  @relation(fields: [auctionId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Bids {
  id        Int      @id @default(autoincrement())
  userId    Int
  auctionId Int
  amount    Decimal
  createdAt DateTime @default(now())
  auction   Auction  @relation(fields: [auctionId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Payment {
  id              Int           @id @default(autoincrement())
  userId          Int
  auctionId       Int
  paymentIntentId String?       @unique
  amount          Decimal
  createdAt       DateTime      @default(now())
  type            PaymentType?
  isWalletPayment Boolean       @default(false)
  status          PaymentStatus @default(PENDING)
  auction         Auction       @relation(fields: [auctionId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
}

model JoinedAuction {
  id                          Int                 @id @default(autoincrement())
  userId                      Int
  auctionId                   Int
  createdAt                   DateTime            @default(now())
  status                      JoinedAuctionStatus @default(IN_PROGRESS)
  paymentExpiryDate           DateTime?
  isWarningMessageSent24Hours Boolean             @default(false)
  auction                     Auction             @relation(fields: [auctionId], references: [id])
  user                        User                @relation(fields: [userId], references: [id])
  isWarningMessageSent1Hour   Boolean             @default(false)
}

model Admin {
  id        Int      @id @default(autoincrement())
  fullName  String?
  email     String
  password  String
  imageLink String?
  imagePath String?
  createdAt DateTime @default(now())
}

model Wallet {
  id              Int                   @id @default(autoincrement())
  userId          Int
  auctionId       Int?
  purchaseId      Int?
  amount          Decimal
  date            DateTime              @default(now())
  description     String
  status          WalletStatus
  transactionType WalletTransactionType
  balance         Decimal
  auction         Auction?              @relation(fields: [auctionId], references: [id])
  user            User                  @relation(fields: [userId], references: [id])
  purchase        Purchase?             @relation(fields: [purchaseId], references: [id])
}

model AlletreWallet {
  id              Int                   @id @default(autoincrement())
  userId          Int
  auctionId       Int?
  purchaseId      Int?
  amount          Decimal
  date            DateTime              @default(now())
  description     String
  status          WalletStatus
  transactionType WalletTransactionType
  balance         Decimal
  auction         Auction?              @relation(fields: [auctionId], references: [id])
  user            User                  @relation(fields: [userId], references: [id])
  purchase        Purchase?             @relation(fields: [purchaseId], references: [id])
}

model AuctionComplaints {
  id            Int                 @id @default(autoincrement())
  userId        Int
  auctionId     Int
  date          DateTime            @default(now())
  message       String
  auctionStatus JoinedAuctionStatus
  problemStatus ProblemStatus       @default(PENDING)
  images        ComplaintImages[]
  auction       Auction             @relation(fields: [auctionId], references: [id])
  user          User                @relation(fields: [userId], references: [id])
}

model ComplaintImages {
  id          Int               @id @default(autoincrement())
  complaintId Int
  imagePath   String
  imageLink   String
  createdAt   DateTime          @default(now())
  complaint   AuctionComplaints @relation(fields: [complaintId], references: [id])
}

model Notification {
  id           Int      @id @default(autoincrement())
  userId       Int
  message      String
  productTitle String?
  imageLink    String?
  auctionId    Int?
  isRead       Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum DeliveryRequestsStatus {
  DELIVERY_PENDING
  DELIVERY_SUCCESS
  DELIVERY_IN_PROGRESS
  DELIVERY_FAILED
  DELIVERY_HOLD
}
enum ProblemStatus {
  PENDING
  SOLVED
  IN_PROGRESS
}

enum WalletStatus {
  DEPOSIT
  WITHDRAWAL
}

enum WalletTransactionType {
  By_AUCTION
  BY_DIRECT_SELL
}

enum UsageStatus {
  NEW
  USED
  OPEN_BOX
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  HOLD
  CANCELLED
}

enum WithdrawalStatus {
  PENDING
  SUCCESS
  FAILED
  HOLD
  CANCELLED
  IN_PROGRESS
}

enum AuctionStatus {
  DRAFTED
  PENDING_OWNER_DEPOIST
  ACTIVE
  IN_SCHEDULED
  ARCHIVED
  SOLD
  WAITING_FOR_PAYMENT
  EXPIRED
  CANCELLED_BEFORE_EXP_DATE
  CANCELLED_AFTER_EXP_DATE
  CANCELLED_BY_ADMIN
}

enum AuctionType {
  ON_TIME
  SCHEDULED
}

enum DurationUnits {
  DAYS
  HOURS
}

enum OAuthType {
  GOOGLE
  FACEBOOK
  APPLE
}

enum JoinedAuctionStatus {
  IN_PROGRESS
  PENDING_PAYMENT
  WAITING_FOR_DELIVERY
  PAYMENT_EXPIRED
  LOST
  COMPLETED
  CANCELLED_BEFORE_EXP_DATE
  CANCELLED_AFTER_EXP_DATE
  CANCELLED_BY_ADMIN
}

enum PaymentType {
  SELLER_DEPOSIT
  BIDDER_DEPOSIT
  AUCTION_PURCHASE
  BUY_NOW_PURCHASE
}

enum DeliveryType {
  NOT_SPECIFIED
  PICKUP
  DELIVERY
}
