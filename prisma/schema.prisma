generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                  Int             @id @default(autoincrement())
  userName            String?
  email               String?         @unique
  password            String?
  phone               String?         @unique
  createdAt           DateTime        @default(now())
  imageLink           String?
  imagePath           String?
  isOAuth             Boolean         @default(false)
  hasCompletedProfile Boolean         @default(false)
  isVerified          Boolean         @default(false)
  lang                String          @default("en")
  oAuthType           OAuthType?
  socketId            String?
  stripeId            String?
  auctions            Auction[]
  locations           Location[]
  watchLists          WatchList[]
  bids                Bids[]
  Payment             Payment[]
  JoinedAuction       JoinedAuction[]
}

model Country {
  id        Int        @id @default(autoincrement())
  nameAr    String
  nameEn    String
  createdAt DateTime   @default(now())
  cities    City[]
  locations Location[]
  Product   Product[]
}

model City {
  id        Int        @id @default(autoincrement())
  nameAr    String
  nameEn    String
  createdAt DateTime   @default(now())
  countryId Int
  country   Country    @relation(fields: [countryId], references: [id])
  locations Location[]
  Product   Product[]
}

model Location {
  id           Int       @id @default(autoincrement())
  userId       Int
  countryId    Int
  cityId       Int
  address      String
  zipCode      String?
  addressLabel String?
  createdAt    DateTime  @default(now())
  isMain       Boolean   @default(false)
  user         User      @relation(fields: [userId], references: [id])
  city         City      @relation(fields: [cityId], references: [id])
  country      Country   @relation(fields: [countryId], references: [id])
  auctions     Auction[]
}

model Category {
  id                       Int            @id @default(autoincrement())
  nameEn                   String
  nameAr                   String
  createdAt                DateTime       @default(now())
  hasUsageCondition        Boolean        @default(false)
  sellerDepositFixedAmount Decimal?
  bidderDepositFixedAmount Decimal?
  bannerLink               String?
  bannerPath               String?
  sliderLink               String?
  sliderPath               String?
  products                 Product[]
  subCategories            SubCategory[]
  brands                   Brand[]
  customFields             CustomFields[]
}

model SubCategory {
  id           Int            @id @default(autoincrement())
  nameAr       String
  nameEn       String
  categoryId   Int
  createdAt    DateTime       @default(now())
  imageLink    String?
  imagePath    String?
  products     Product[]
  category     Category       @relation(fields: [categoryId], references: [id])
  customFields CustomFields[]
}

model CustomFields {
  id            Int          @id @default(autoincrement())
  subCategoryId Int?
  subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id])
  categoryId    Int?
  category      Category?    @relation(fields: [categoryId], references: [id])
  key           String
  resKey        String       @default("")
  type          String
  labelAr       String
  labelEn       String
}

model Brand {
  id         Int       @id @default(autoincrement())
  name       String
  categoryId Int
  createdAt  DateTime  @default(now())
  products   Product[]
  category   Category  @relation(fields: [categoryId], references: [id])
}

model Product {
  id                  Int          @id @default(autoincrement())
  categoryId          Int
  subCategoryId       Int?
  brandId             Int?
  quantity            Int          @default(1)
  title               String
  model               String?
  usageStatus         UsageStatus?
  description         String
  color               String?
  screenSize          Float?
  processor           String?
  operatingSystem     String?
  releaseYear         String?
  regionOfManufacture String?
  ramSize             Int?
  cameraType          String?
  material            String?
  age                 Int?
  totalArea           Float?
  numberOfRooms       Int?
  numberOfFloors      Int?
  landType            String?
  countryId           Int?
  cityId              Int?
  carType             String?
  auction             Auction?
  images              Image[]
  category            Category     @relation(fields: [categoryId], references: [id])
  subCategory         SubCategory? @relation(fields: [subCategoryId], references: [id])
  brand               Brand?       @relation(fields: [brandId], references: [id])
  city                City?        @relation(fields: [cityId], references: [id])
  country             Country?     @relation(fields: [countryId], references: [id])
}

model Image {
  id        Int      @id @default(autoincrement())
  productId Int
  imagePath String
  imageLink String
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
}

model Auction {
  id              Int             @id @default(autoincrement())
  userId          Int
  productId       Int             @unique
  locationId      Int?
  status          AuctionStatus   @default(PENDING_OWNER_DEPOIST)
  type            AuctionType?
  durationUnit    DurationUnits?
  durationInDays  Int?
  durationInHours Int?
  startBidAmount  Decimal?
  isBuyNowAllowed Boolean         @default(false)
  acceptedAmount  Decimal?
  startDate       DateTime?
  expiryDate      DateTime?
  endDate         DateTime?
  createdAt       DateTime        @default(now())
  product         Product         @relation(fields: [productId], references: [id])
  user            User            @relation(fields: [userId], references: [id])
  watchLists      WatchList[]
  location        Location?       @relation(fields: [locationId], references: [id])
  bids            Bids[]
  Payment         Payment[]
  JoinedAuction   JoinedAuction[]
}

model WatchList {
  id        Int      @id @default(autoincrement())
  userId    Int
  auctionId Int
  createdAt DateTime @default(now())
  auction   Auction  @relation(fields: [auctionId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Bids {
  id        Int      @id @default(autoincrement())
  userId    Int
  auctionId Int
  amount    Decimal
  createdAt DateTime @default(now())
  auction   Auction  @relation(fields: [auctionId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Payment {
  id              Int           @id @default(autoincrement())
  userId          Int
  auctionId       Int
  paymentIntentId String        @unique
  amount          Decimal
  createdAt       DateTime      @default(now())
  type            PaymentType?
  status          PaymentStatus @default(PENDING)
  auction         Auction       @relation(fields: [auctionId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
}

model JoinedAuction {
  id                Int                 @id @default(autoincrement())
  userId            Int
  auctionId         Int
  createdAt         DateTime            @default(now())
  status            JoinedAuctionStatus @default(IN_PROGRESS)
  paymentExpiryDate DateTime?
  auction           Auction             @relation(fields: [auctionId], references: [id])
  user              User                @relation(fields: [userId], references: [id])
}

enum UsageStatus {
  NEW
  USED
  OPEN_BOX
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum AuctionStatus {
  DRAFTED
  PENDING_OWNER_DEPOIST
  ACTIVE
  IN_SCHEDULED
  ARCHIVED
  SOLD
  WAITING_FOR_PAYMENT
  EXPIRED
}

enum AuctionType {
  ON_TIME
  SCHEDULED
}

enum DurationUnits {
  DAYS
  HOURS
}

enum OAuthType {
  GOOGLE
  FACEBOOK
  APPLE
}

enum JoinedAuctionStatus {
  IN_PROGRESS
  PENDING_PAYMENT
  WAITING_FOR_DELIVERY
  PAYMENT_EXPIRED
  LOST
  COMPLETED
}

enum PaymentType {
  SELLER_DEPOSIT
  BIDDER_DEPOSIT
  AUCTION_PURCHASE
  BUY_NOW_PURCHASE
}
